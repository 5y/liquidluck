#compdef liquidluck
#autoload

# liquidluck zsh completion, based on homebrew completion

_webhook_subcommand() {
    webhook_subcommand=(
        'start'
        'stop'
        'restart'
    )
}

local -a _1st_arguments
_1st_arguments=(
  'build:Build the website'
  'create:Create a settings file'
  'search:Search a theme'
  'install:Install a theme'
  'document:Open documentation in browser'
  'version:Show Felix Felicis version'
  'webhook:Start webhook server'
  'server:Start preview server'
)

local expl
local -a webhook_subcommand

_arguments \
  '(-s --settings)'{-s,--settings}'[specify a setting file]' \
  '(-h --help)'{-h,--help}'[show help]' \
  '(-v --verbose)'{-v,--verbose}'[give more output]' \
  '(-p --port)'{-p,--port}'[webhook server port]' \
  '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
  _describe -t commands "liquidluck subcommand" _1st_arguments
  return
fi

case "$words[1]" in
  build)
    _arguments \
      '(-s --settings)'{-s,--settings}'[specify a setting file]' \
      '(-v --verbose)'{-v,--verbose}'[give more output]' ;;
  create)
    _arguments \
      '(-s --settings)'{-s,--settings}'[specify a setting file]' ;;
  webhook)
    _arguments \
      '(-p --port)'{-p,--port}'[webhook server port]' \
      '(-s --settings)'{-s,--settings}'[specify a setting file]' \
      '1: :->webhookcmd' && return 0
    if [[ "$state" == webhookcmd ]]; then
        _webhook_subcommand
        _wanted webhook_subcommand expl 'webhook subcommand' compadd -a webhook_subcommand
    fi;;
  server)
    _arguments \
      '(-p --port)'{-p,--port}'[webhook server port]' \
      '(-s --settings)'{-s,--settings}'[specify a setting file]' ;;
esac
